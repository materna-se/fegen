/**
 * Copyright 2020 Materna Information & Communications SE
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package de.materna.fegen.web.templates

import de.materna.fegen.core.DTReference
import de.materna.fegen.core.DomainType
import de.materna.fegen.core.EntityType
import de.materna.fegen.core.EnumType
import de.materna.fegen.core.ProjectionType
import de.materna.fegen.core.join
import de.materna.fegen.web.FeGenWeb
import de.materna.fegen.web.declaration
import de.materna.fegen.web.nameBase
import de.materna.fegen.web.nameDto
import de.materna.fegen.web.projectionTypeInterfaceName

fun FeGenWeb.toEntitiesTS() = """
    // This file has been generated by FeGen based on a spring application. Do not edit it.
    
    import { ApiNavigationLink, ApiBase } from '@materna-se/fegen-runtime';

    ${types.join(
        indent = 1,
        separator = "\n\n"
) {

    toDeclaration()
}}
""".trimIndent()

private fun DomainType.toDeclaration() = when (this) {
    is EntityType -> toDeclaration()
    is ProjectionType -> toDeclaration()
    is EnumType -> toDeclaration()
}

private fun EntityType.toDeclaration() = """
    /**
     * This type is used as a basis for the different variants of this domain type. It can be created in the frontend
     * (in order to store it to the backend, for example) as it does neither have mandatory `_links` nor `id`.
     */
    export interface $nameBase extends ApiBase {
        ${nonComplexFields.filter { it.name != "id" }.join(indent = 2) { toDeclaration() }}
        ${entityFields.join(indent = 2) { toDeclaration() }}
        _links?: {
            self: ApiNavigationLink
            ${entityFields.join(indent = 3) { "$name: ApiNavigationLink" }}
        }
    }

    /**
     * This type is used for data transfer. Each time we read an object of this domain type from a rest service,
     * this type will be returned.
     */
    export interface $nameDto extends $nameBase {
        _links: {
            self: ApiNavigationLink
            ${entityFields.join(indent = 3) { "$name: ApiNavigationLink" }}
        }
    }

    /**
     * This type is the default type of choice in the frontend as it has an id (which can be added to the `$nameDto`
     * via `apiHelper#getObjectId`). Consequently, this type is used for fields that reference this type.
     */
    export interface $name extends $nameDto {
        id: number
    }
""".trimIndent()

private fun ProjectionType.toDeclaration() = """
    export interface $projectionTypeInterfaceName extends ${parentType.name} {
        ${fields.join(indent = 2) { toDeclaration() }}
    }
""".trimIndent()

private fun EnumType.toDeclaration() = """
    export enum $name {
        ${constants.join(indent = 2, separator = ",\n") { "${this} = \"${this}\"" }}
    }
""".trimIndent()

private fun DTReference.toDeclaration(optional: Boolean = false) = """
    $name${if (optional) "?" else ""}: $declaration${if (justSettable || this.optional) " | null" else ""}
""".trimIndent()